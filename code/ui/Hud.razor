@using Sandbox;
@using Sandbox.UI;
@using System;

@namespace Spleef
@inherits RootPanel
@attribute [StyleSheet]

<root>
	<ChatBox />
	<VoiceList />

	<div class="header">
		<!--<h1>@SpleefGame.Instance.RoundInfo.ToString()</h1>-->
		@if (SpleefGame.Instance.gamestate is WinnerState wr)
		{
			<label> @WinnerName() Won! </label>
			<label class="subtitle"> Next round will start in @wr.countdownFinished.Relative.ToString("0") </label>
		}
		else if (SpleefGame.Instance.gamestate is PrePlayCountdownState cr)
		{
			<label style="font-size:@TextScalar();"> @PrettyCountdown() </label>
		}
		else if (SpleefGame.Instance.gamestate is PlayingState pr)
		{
		}
		else if (SpleefGame.Instance.gamestate is LobbyState lr)
		{
			<label> Waiting for players </label>
			<label class="subtitle"> @GetCurrentPlayerCount() / @LobbyState.RequiredPlayerCount </label>
		}
	</div>

	@if (SpleefGame.Instance.gamestate is PlayingState)
	{
		<span class="crosshair"></span>
	}

</root>

@code
{
	private GameStateBase gameState => SpleefGame.Instance.gamestate;
	int GetCurrentPlayerCount()
	{
		return Game.Clients.Count;
	}

	string TextScalar()
	{
		//This is bad function but it works
		float l = (1.0f).LerpTo(3, ((PrePlayCountdownState)gameState).countdownFinished.Relative / 3.0f);
		return $"{l * 40}px";
	}

	string PrettyCountdown()
	{
		Log.Trace(((PrePlayCountdownState)gameState).countdownFinished.Relative);
		int value = (int)Math.Max(((PrePlayCountdownState)gameState).countdownFinished.Relative, 0);

		if (value <= 0)
			return "FIGHT !";

		return value.ToString();
	}

	protected string WinnerName()
	{
		return ((WinnerState)gameState).WinningClient.Name;
	}

	protected override int BuildHash()
	{
		//Log.Warning(SpleefGame.Instance.RoundInfo.GetType().Name);

		return HashCode.Combine(Time.Delta);///
		/*
		if (SpleefGame.Current.RoundInfo is CountDownRound cr)
		{
			return HashCode.Combine(cr.countdownFinished.Relative);
		}

		return HashCode.Combine(SpleefGame.Current.RoundInfo);*/
	}
}